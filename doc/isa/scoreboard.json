[
    {
        "format": "ADC(.B)  dst",
        "implementation": "dst + C -> dst",
        "status": "x x x x"
    },
    {
        "format": "ADD(.B)  src,dst",
        "implementation": "src + dst -> dst",
        "status": "x x x x"
    },
    {
        "format": "ADDC(.B) src,dst",
        "implementation": "src + dst + C -> dst",
        "status": "x x x x"
    },
    {
        "format": "AND(.B)  src,dst",
        "implementation": "src .and. dst -> dst",
        "status": "0 x x x"
    },
    {
        "format": "BIC(.B)  src,dst",
        "implementation": ".not.src .and. dst -> dst",
        "status": "- - - -"
    },
    {
        "format": "BIS(.B)  src,dst",
        "implementation": "src .or. dst -> dst",
        "status": "- - - -"
    },
    {
        "format": "BIT(.B)  src,dst",
        "implementation": "src .and. dst",
        "status": "0 x x x"
    },
    {
        "format": "BR dst",
        "implementation": "Branch to ...",
        "status": "- - - -"
    },
    {
        "format": "CALL     dst",
        "implementation": "PC+2 -> stack, dst -> PC",
        "status": "- - - -"
    },
    {
        "format": "CLR(.B)  dst",
        "implementation": "Clear destination",
        "status": "- - - -"
    },
    {
        "format": "CLRC",
        "implementation": "Clear carry bit",
        "status": "- - - 0"
    },
    {
        "format": "CLRN",
        "implementation": "Clear negative bit",
        "status": "- 0 - -"
    },
    {
        "format": "CLRZ",
        "implementation": "Clear zero bit",
        "status": "- - 0 -"
    },
    {
        "format": "CMP(.B)  src,dst",
        "implementation": "dst - src",
        "status": "x x x x"
    },
    {
        "format": "DADC(.B) dst",
        "implementation": "dst + C -> dst (decimal)",
        "status": "x x x x"
    },
    {
        "format": "DADD(.B) src,dst",
        "implementation": "src + dst + C -> dst (decimal)",
        "status": "x x x x"
    },
    {
        "format": "DEC(.B)  dst",
        "implementation": "dst - 1 -> dst",
        "status": "x x x x"
    },
    {
        "format": "DECD(.B) dst",
        "implementation": "dst - 2 -> dst",
        "status": "x x x x"
    },
    {
        "format": "DINT",
        "implementation": "Disable interrupt",
        "status": "- - - -"
    },
    {
        "format": "EINT",
        "implementation": "Enable interrupt",
        "status": "- - - -"
    },
    {
        "format": "INC(.B)  dst",
        "implementation": "Increment destination, dst +1 -> dst",
        "status": "x x x x"
    },
    {
        "format": "INCD(.B) dst",
        "implementation": "Double-Increment destination, dst+2->dst",
        "status": "x x x x"
    },
    {
        "format": "INV(.B)  dst",
        "implementation": "Invert destination",
        "status": "x x x x"
    },
    {
        "format": "JC       Label",
        "implementation": "Jump to Label if Carry-bit is set",
        "status": "- - - -"
    },
    {
        "format": "JHS      Label",
        "implementation": "Jump to Label if Carry-bit is set",
        "status": "- - - -"
    },
    {
        "format": "JZ       Label",
        "implementation": "Jump to Label if Zero-bit is set",
        "status": "- - - -"
    },
    {
        "format": "JEQ      Label",
        "implementation": "Jump to Label if Zero-bit is set",
        "status": "- - - -"
    },
    {
        "format": "JGE      Label",
        "implementation": "Jump to Label if (N .XOR. V) = 0",
        "status": "- - - -"
    },
    {
        "format": "JL       Label",
        "implementation": "Jump to Label if (N .XOR. V) = 1",
        "status": "- - - -"
    },
    {
        "format": "JMP      Label",
        "implementation": "Jump to Label unconditionally",
        "status": "- - - -"
    },
    {
        "format": "JN       Label",
        "implementation": "Jump to Label if Negative-bit is set",
        "status": "- - - -"
    },
    {
        "format": "JNC      Label",
        "implementation": "Jump to Label if Carry-bit is reset",
        "status": "- - - -"
    },
    {
        "format": "JLO      Label",
        "implementation": "Jump to Label if Carry-bit is reset",
        "status": "- - - -"
    },
    {
        "format": "JNE      Label",
        "implementation": "Jump to Label if Zero-bit is reset",
        "status": "- - - -"
    },
    {
        "format": "JNZ      Label",
        "implementation": "Jump to Label if Zero-bit is reset",
        "status": "- - - -"
    },
    {
        "format": "MOV(.B)  src,dst",
        "implementation": "src -> dst",
        "status": "- - - -"
    },
    {
        "format": "NOP",
        "implementation": "No operation",
        "status": "- - - -"
    },
    {
        "format": "POP(.B)  dst",
        "implementation": "Item from stack, SP+2 -> SP",
        "status": "- - - -"
    },
    {
        "format": "PUSH(.B) src",
        "implementation": "SP - 2 -> SP, src -> @SP",
        "status": "- - - -"
    },
    {
        "format": "RETI",
        "implementation": "Return from interrupt, TOS -> SR, SP + 2 -> SP, TOS -> PC, SP + 2 -> SZ",
        "status": "x x x x"
    },
    {
        "format": "RET",
        "implementation": "Return from subroutine, TOS -> PC, SP + 2 -> SP",
        "status": "- - - -"
    },
    {
        "format": "RLA(.B)  dst",
        "implementation": "Rotate left arithmetically",
        "status": "x x x x"
    },
    {
        "format": "RLC(.B)  dst",
        "implementation": "Rotate left through carry",
        "status": "x x x x"
    },
    {
        "format": "RRA(.B)  dst",
        "implementation": "MSB -> MSB ... LSB -> C",
        "status": "0 x x x"
    },
    {
        "format": "RRC(.B)  dst",
        "implementation": "C -> MSB ... LSB -> C",
        "status": "x x x x"
    },
    {
        "format": "SBC(.B)  dst",
        "implementation": "Subtract carry from destination",
        "status": "x x x x"
    },
    {
        "format": "SETC",
        "implementation": "Set carry bit",
        "status": "- - - 1"
    },
    {
        "format": "SETN",
        "implementation": "Set negative bit",
        "status": "- 1 - -"
    },
    {
        "format": "SETZ",
        "implementation": "Set zero bit",
        "status": "- - 1 -"
    },
    {
        "format": "SUB(.B)  src,dst",
        "implementation": "dst + .not.src + 1 -> dst",
        "status": "x x x x"
    },
    {
        "format": "SUBC(.B) src,dst",
        "implementation": "dst + .not.src + C -> dst",
        "status": "x x x x"
    },
    {
        "format": "SWPB     dst",
        "implementation": "swap bytes",
        "status": "- - - -"
    },
    {
        "format": "SXT      dst",
        "implementation": "Bit7 -> Bit8 ... Bit15",
        "status": "0 x x x"
    },
    {
        "format": "TST(.B)  dst",
        "implementation": "Test destination",
        "status": "x x x x"
    },
    {
        "format": "XOR(.B)  src,dst",
        "implementation": "src .xor. dst -> dst",
        "status": "x x x x"
    }
]
